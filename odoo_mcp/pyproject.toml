[project]
name = "odoo-mcp-server"
version = "0.1.0"
description = "MCP server for Odoo ERP integration with AI agents"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    {name = "Source", email = "dev@source.com"}
]
dependencies = [
    "fastmcp>=0.1.0",
    "aiohttp>=3.9.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.5.0",
    "pyyaml>=6.0.2",
    "uvicorn>=0.35.0",
]

[project.scripts]
odoo-mcp-server = "odoo_mcp.__main__:main"

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-aiohttp>=1.0.5",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.5.0",
    "hypothesis>=6.100.0",
    "coverage[toml]>=7.4.0",
    "ruff>=0.3.0",
    "mypy>=1.9.0",
    "bandit[toml]>=1.7.8",
    "safety>=3.0.0",
    "pre-commit>=3.6.0",
    "types-aiofiles>=23.2.0",
    "types-pyyaml>=6.0.12",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/odoo_mcp"]

[tool.uv]
dev-dependencies = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-aiohttp>=1.0.5",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.5.0",
    "hypothesis>=6.100.0",
    "coverage[toml]>=7.4.0",
    "ruff>=0.3.0",
    "mypy>=1.9.0",
    "bandit[toml]>=1.7.8",
    "safety>=3.0.0",
    "pre-commit>=3.6.0",
]

[tool.ruff]
target-version = "py312"
line-length = 88
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    ".mypy_cache",
    ".pytest_cache",
    "test_prompts.py",
    "node_modules"
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "PL",  # pylint
    "RUF", # ruff-specific rules
    "S",   # bandit security
    "N",   # pep8-naming
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "Q",   # flake8-quotes
    "T20", # flake8-print
    "RET", # flake8-return
    "SLF", # flake8-self
    "ASYNC", # flake8-async
]
ignore = [
    "PLR0913",  # Too many arguments
    "S101",     # Use of assert in tests
    "PLR0915",  # Too many statements
    "PLR2004",  # Magic value used in comparison
    "E501",     # Line too long (handled by formatter)
    "TCH001",   # TYPE_CHECKING imports
    "TCH002",   # TYPE_CHECKING imports
    "RET504",   # Unnecessary assignment before return
    "T201",     # print found
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S105", "S106", "T201"]  # Allow assert, hardcoded passwords, and prints in tests
"test_*.py" = ["T201"]  # Allow print in test files
"src/odoo_mcp/prompts.py" = ["PLR0915"]  # Allow many statements in prompts

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=90",
    "-n auto",
    "--asyncio-mode=auto",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests with Odoo",
    "e2e: End-to-end tests",
    "slow: Tests that take more than 5 seconds",
]

[tool.coverage.run]
branch = true
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.bandit]
skips = ["B101"]  # Allow assert
tests = ["B201", "B301", "B302", "B303", "B304", "B305", "B306", "B601", "B602"]
exclude_dirs = ["tests", "venv", ".venv"]

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*_test.py"]
